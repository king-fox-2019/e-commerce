{"remainingRequest":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/src/components/AdminDashboard.vue?vue&type=style&index=0&id=61f853b5&lang=scss&scoped=true&","dependencies":[{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/src/components/AdminDashboard.vue","mtime":1576433147821},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY29udGFpbmVyIHsKICBoZWlnaHQ6IDEwMCU7CiAgcGFkZGluZy10b3A6IDUuN3JlbTsKfQo="},{"version":3,"sources":["AdminDashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;AACA;AACA;AACA","file":"AdminDashboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <b-row align-h=\"between\">\n      <b-col md=\"6\" lg=\"4\">\n        <b-card title=\"Pending Transaction\" align=\"center\">\n          <b-card-sub-title sub-title-text-variant=\"muted\">\n            There are\n            <strong>{{ transactions.length }}</strong> Pending Transaction\n          </b-card-sub-title>\n          <b-button\n            class=\"mt-3\"\n            variant=\"outline-primary\"\n            to=\"/admin/transactions\"\n            >Go to Transactions</b-button\n          >\n        </b-card>\n      </b-col>\n\n      <b-col md=\"6\" class=\"mt-3 mt-md-0\">\n        <b-card>\n          <b-card-title class=\"text-center\">Add New Item</b-card-title>\n          <b-card-body>\n            <b-form @submit.prevent=\"onAddNewItem\" novalidate>\n              <b-form-group label=\"Item Name\" label-for=\"item-name\">\n                <b-form-input\n                  id=\"item-name\"\n                  v-model=\"name\"\n                  type=\"text\"\n                  :state.sync=\"validateName\"\n                  @focus=\"validateName = null\"\n                  required\n                  placeholder=\"Item Name\"\n                ></b-form-input>\n              </b-form-group>\n\n              <b-form-group label=\"Image\" label-for=\"item-image\">\n                <b-form-file\n                  accept=\"image/*\"\n                  v-model=\"imageFile\"\n                  :state.sync=\"validateImage\"\n                  @focus=\"validateImage = null\"\n                  required\n                ></b-form-file>\n              </b-form-group>\n\n              <b-form-group label=\"Price\" label-for=\"item-price\">\n                <b-form-input\n                  id=\"item-price\"\n                  v-model=\"price\"\n                  type=\"text\"\n                  :state.sync=\"validatePrice\"\n                  @focus=\"validatePrice = null\"\n                  required\n                  @keyup=\"validateNumber\"\n                  placeholder=\"Item Price\"\n                ></b-form-input>\n              </b-form-group>\n\n              <b-form-group label=\"Stock\" label-for=\"item-stock\">\n                <b-form-input\n                  id=\"item-stock\"\n                  v-model=\"stock\"\n                  type=\"number\"\n                  :state.sync=\"validateStock\"\n                  @focus=\"validateStock = null\"\n                  required\n                  placeholder=\"Item Stock\"\n                ></b-form-input>\n              </b-form-group>\n\n              <b-button type=\"submit\" variant=\"primary\">Add Item</b-button>\n            </b-form>\n          </b-card-body>\n        </b-card>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: '',\n      imageFile: null,\n      imageUrl: '',\n      price: '',\n      stock: 0,\n      validateName: null,\n      validateImage: null,\n      validatePrice: null,\n      validateStock: null\n    }\n  },\n  computed: {\n    pendingTransactions() {\n      return this.$store.state.admin.transactions.filter(\n        t => t.status == 'confirming'\n      )\n    }\n  },\n  methods: {\n    validateNumber() {\n      this.price = this.price.replace(/[^0-9]+/g, '')\n    },\n    onAddNewItem() {\n      const { name, imageUrl, price, stock } = this\n      let isValid = true\n      if (!name) {\n        this.validateName = false\n        isValid = false\n      }\n      if (!imageUrl) {\n        this.validateImage = false\n        isValid = false\n      }\n      if (!price) {\n        this.validatePrice = false\n        isValid = false\n      }\n      if (isValid) {\n        const loader = this.$loading.show()\n        this.$store\n          .dispatch('ADD_ITEM', { name, image: imageUrl, price, stock })\n          .then(({ data }) => {\n            this.$toasted.show(data.message)\n            this.name = ''\n            this.imageUrl = ''\n            this.imageFile = null\n            this.price = ''\n            this.stock = 0\n          })\n          .catch(({ response }) => {\n            this.password = ''\n            if (response) {\n              const message = response.data.message\n              if (typeof message != 'string') {\n                response.data.message.forEach(msg => {\n                  this.$toasted.show(msg, { className: 'bg-danger' })\n                })\n              } else {\n                this.$toasted.show(response.data.message, {\n                  className: 'bg-danger'\n                })\n              }\n            } else {\n              this.$toasted.show('Something went wrong', {\n                className: 'bg-danger'\n              })\n            }\n          })\n          .finally(() => loader.hide())\n      }\n    }\n  },\n  watch: {\n    imageFile(val) {\n      if (val)\n        this.$store.dispatch('UPLOAD_IMAGE', val).then(({ data }) => {\n          this.imageUrl = data.data.image\n        })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  height: 100%;\n  padding-top: 5.7rem;\n}\n</style>\n"]}]}