{"remainingRequest":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/src/views/Admin.vue?vue&type=style&index=0&id=54c38a05&lang=scss&scoped=true&","dependencies":[{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/src/views/Admin.vue","mtime":1576433612491},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aliftaufik/Documents/hacktiv8/hacktiv8-phase-2-repeat/portofolio/lazalopedia/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250YWluZXIgewogIHdpZHRoOiAxMDAlOwogIHBhZGRpbmctdG9wOiAzLjdyZW07Cn0K"},{"version":3,"sources":["Admin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwRA;AACA;AACA;AACA","file":"Admin.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <navbar></navbar>\n    <div v-if=\"$route.path == '/admin'\">\n      <div\n        class=\"container row mx-auto justify-content-center align-items-center\"\n        v-if=\"!superExist\"\n      >\n        <b-jumbotron\n          header-level=\"5\"\n          bg-variant=\"transparent\"\n          class=\"col-12 d-flex text-center pb-0\"\n          id=\"landing-page\"\n          fluid\n        >\n          <template v-slot:header>Register Super Admin</template>\n        </b-jumbotron>\n        <b-form\n          class=\"col-12 col-md-8 col-lg-6 col-xl-5 align-self-start\"\n          @submit.prevent=\"onRegister\"\n          novalidate\n        >\n          <b-form-group\n            label-for=\"username\"\n            description=\"Must only contains lowercase letters, numbers, dots and/or underscores.\"\n          >\n            <b-form-input\n              id=\"username\"\n              v-model.trim=\"username\"\n              type=\"text\"\n              placeholder=\"Username\"\n              :state=\"validateUsername\"\n              @focus=\"emptyUsername = false\"\n              required\n            ></b-form-input>\n            <b-popover\n              target=\"username\"\n              placement=\"right\"\n              variant=\"danger\"\n              content=\"Username cannot empty!\"\n              triggers\n              :show.sync=\"emptyUsername\"\n            ></b-popover>\n          </b-form-group>\n\n          <b-form-group\n            label-for=\"password\"\n            description=\"Must have at least 6 characters.\"\n          >\n            <b-form-input\n              id=\"password\"\n              v-model=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              :state=\"validatePassword\"\n              @focus=\"emptyPassword = false\"\n              required\n            ></b-form-input>\n            <b-popover\n              target=\"password\"\n              placement=\"right\"\n              variant=\"danger\"\n              content=\"Password cannot empty!\"\n              triggers\n              :show.sync=\"emptyPassword\"\n            ></b-popover>\n          </b-form-group>\n\n          <div\n            class=\"d-flex justify-content-between align-items-center flex-wrap\"\n          >\n            <b-button type=\"submit\" variant=\"primary\">Sign Up</b-button>\n          </div>\n        </b-form>\n      </div>\n\n      <div\n        class=\"container row mx-auto justify-content-center align-items-center\"\n        v-if=\"superExist\"\n      >\n        <b-jumbotron\n          header-level=\"5\"\n          bg-variant=\"transparent\"\n          class=\"col-12 d-flex text-center pb-0\"\n          id=\"landing-page\"\n          fluid\n        >\n          <template v-slot:header>Admin Sign In</template>\n        </b-jumbotron>\n        <b-form\n          class=\"col-12 col-md-8 col-lg-6 col-xl-5 align-self-start\"\n          @submit.prevent=\"onSignIn\"\n          novalidate\n        >\n          <b-form-group label-for=\"username\">\n            <b-form-input\n              id=\"username\"\n              v-model.trim=\"username\"\n              type=\"text\"\n              placeholder=\"Username\"\n              @focus=\"emptyUsername = false\"\n              required\n            ></b-form-input>\n            <b-popover\n              target=\"username\"\n              placement=\"right\"\n              variant=\"danger\"\n              content=\"Username cannot empty!\"\n              triggers\n              :show.sync=\"emptyUsername\"\n            ></b-popover>\n          </b-form-group>\n\n          <b-form-group label-for=\"password\">\n            <b-form-input\n              id=\"password\"\n              v-model=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              @focus=\"emptyPassword = false\"\n              required\n            ></b-form-input>\n            <b-popover\n              target=\"password\"\n              placement=\"right\"\n              variant=\"danger\"\n              content=\"Password cannot empty!\"\n              triggers\n              :show.sync=\"emptyPassword\"\n            ></b-popover>\n          </b-form-group>\n\n          <div\n            class=\"d-flex justify-content-between align-items-center flex-wrap\"\n          >\n            <b-button type=\"submit\" variant=\"primary\">Sign In</b-button>\n          </div>\n        </b-form>\n      </div>\n    </div>\n\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nimport AdminNavBar from '@/components/AdminNavbar'\n\nexport default {\n  components: {\n    navbar: AdminNavBar\n  },\n  data() {\n    return {\n      username: '',\n      password: '',\n      emptyUsername: false,\n      emptyPassword: false,\n      superExist: true\n    }\n  },\n  computed: {\n    validateUsername() {\n      return this.username ? /^[a-zA-Z0-9_.]+$/.test(this.username) : null\n    },\n    validatePassword() {\n      return this.password ? this.password.length >= 6 : null\n    }\n  },\n  methods: {\n    onRegister() {\n      let isValid = true\n      const { username, password } = this\n      if (!username) {\n        this.emptyUsername = true\n        isValid = false\n      }\n      if (!password) {\n        this.emptyPassword = true\n        isValid = false\n      }\n      if (isValid && this.validateUsername && this.validatePassword) {\n        const loader = this.$loading.show()\n        this.$store\n          .dispatch('ADMIN_REGISTER', {\n            username,\n            password\n          })\n          .then(({ data }) => {\n            this.$toasted.show(data.message)\n            this.$router.replace('/admin/dashboard')\n          })\n          .catch(({ response }) => {\n            this.password = ''\n            if (response) {\n              const message = response.data.message\n              if (typeof message != 'string') {\n                response.data.message.forEach(msg => {\n                  this.$toasted.show(msg, { className: 'bg-danger' })\n                })\n              } else {\n                this.$toasted.show(response.data.message, {\n                  className: 'bg-danger'\n                })\n              }\n            } else {\n              this.$toasted.show('Something went wrong', {\n                className: 'bg-danger'\n              })\n            }\n          })\n          .finally(() => loader.hide())\n      }\n    },\n    onSignIn() {\n      let isValid = true\n      const { username, password } = this\n      if (!username) {\n        this.emptyUsername = true\n        isValid = false\n      }\n      if (!password) {\n        this.emptyPassword = true\n        isValid = false\n      }\n      if (isValid) {\n        const loader = this.$loading.show()\n        this.$store\n          .dispatch('ADMIN_SIGN_IN', {\n            username,\n            password\n          })\n          .then(({ data }) => {\n            this.$toasted.show(data.message)\n            this.$router.replace('/admin/dashboard')\n          })\n          .catch(({ response }) => {\n            this.password = ''\n            if (response) {\n              const message = response.data.message\n              if (typeof message != 'string') {\n                response.data.message.forEach(msg => {\n                  this.$toasted.show(msg, { className: 'bg-danger' })\n                })\n              } else {\n                this.$toasted.show(response.data.message, {\n                  className: 'bg-danger'\n                })\n              }\n            } else {\n              this.$toasted.show('Something went wrong', {\n                className: 'bg-danger'\n              })\n            }\n          })\n          .finally(() => loader.hide())\n      }\n    }\n  },\n  created() {\n    this.$store\n      .dispatch('CHECK_SUPER_ADMIN')\n      .then(() => (this.superExist = true))\n      .catch(() => (this.superExist = false))\n    this.$store\n      .dispatch('CHECK_SESSION')\n      .then(() => {\n        if (this.$route.path == '/admin')\n          this.$router.replace('/admin/dashboard')\n        this.$store.dispatch('FETCH_ADMIN_TRANSACTIONS')\n        this.$store.dispatch('FETCH_ADMIN_ITEMS')\n      })\n      .catch(() => {\n        if (this.$route.path != '/admin') this.$router.replace('/admin')\n      })\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  width: 100%;\n  padding-top: 3.7rem;\n}\n</style>\n"]}]}